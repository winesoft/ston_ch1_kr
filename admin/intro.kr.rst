.. _intro:

1장. STON 소개
******************

STON은 인터넷 서비스를 쉽게 확장하기(Easy Scale Out) 위해 개발된 Edge서버이다. 
이전에는 개발과 운영을 따로 규정지었지만 바야흐로 `DevOps <http://en.wikipedia.org/wiki/DevOps>`_ 의 시대이다.
운영없이는 서비스 또한 없다.
하지만 그 동안 운영의 주체인 관리자들의 편안한 주말을 보장해주는 솔루션이 없었다.

STON은 상용솔루션이다.
"상용"의 가장 큰 의미는 장애대처와 재발방지이다.
분명 관리자/개발자들이 책임져야하는 Open Source와는 그 궤를 달리한다.
STON의 개발목표는 국내외 수 많은 서비스를 통해 검증된 신뢰를 모든 고객에게 전파하는 것이다.



.. toctree::
   :maxdepth: 2


서비스 설계의 원칙
====================================

서비스의 성공은 가용성, 속도, 확장성에 달려있다. “확장성 웹 아키텍처와 분산 시스템 설계 (Scalable Web Architecture and Distributed Systems)”를 저술한 Kate Matsudaira도 이 원칙들을 강조한다. 



가용성 (availability)
---------------------

서비스는 항상 가능해야 한다. 사이트 장애시 90%의 사용자는 경쟁사 서비스로 이동한다.  100% 완벽한 시스템은 없다. 그러나 장애가 발생하면 복구는 빨라야 한다. 일부 결함의 전체 영향은 없어야 한다. 



속도 (performance)
---------------------

고객은 인내심이 많지 않다. Akamai의 조사에 따르면 47%의 인터넷 사용자들은 웹페이지가 2초 안에 열리기를 기대한다. 비즈니스에서 시간은 금이다. 응답시간이 느리면 매출이 감소한다. Amazon은 응답시간이 0.1초 지연되면 매출 1%가 감소한다.  




확장성 (Scalability)
---------------------

확장성은 서비스의 크기만이 아니다. 크기를 키우고 유지하는 노력, 스토리지 확장 용이성, 트랜잭션 처리 여력도 확장성의 일부이다. 관리의 확장성도 고려해야 한다. 진단, 문제 이해, 업데이트와 변경이 쉬워야 한다.

모든 원칙은 최소비용으로 구현되어야 한다. 비용이란 돈뿐만이 아니다. 개발 시간, 운영 노력, 심지어 교육훈련도 비용이다.

Matsudaira는 다음 방법을 제시한다.
상호 독립적인 (complementary) 컴포넌트의 구성 시스템 설계
비공유 (shared-nothing) 아키텍쳐로 여유도 (redundancy) 설계
확장용이한 partitioning 설계



